#!/usr/bin/perl

##########################################################
# REMEBER TO UPDATE SUDOERS WHEN MAKING A NEW PARALLEL-SQL
##########################################################

use DBI;
use Getopt::Long;

GetOptions("load" => \$load,
	"stats" => \$stats,
	"del" => \$delete,
	"reset" => \$reset,
	"reset-sched" => \$reset_pbs,
	"reset-slurm" => \$reset_slurm,
	"reset-pbs" => \$reset_pbs,
	"reset-all" => \$reset_all,
	"del-comp" => \$delete_comp,
	"show-nonzero" => \$nonzero,
	"reset-nonzero" => \$nonzero_reset,
	"show-comp" => \$show_comp,
	"show-avail" => \$show_avail,
	"show-running" => \$show_running,	
	"show-sets" => \$show_sizes,
	"show-index" => \$show_index,
	"set-index=s" => \$set_index,
	"show-sizes" => \$show_sizes,
	"y" => \$yes,
	"a=s" => \$database,
	"set=s" => \$sqlset,
	"sql-set=s" => \$sqlset) || main::HELP_MESSAGE();

if (! $database) { $database = 'parallel'; }

my $dbconf = $ENV{'HOME'} . "/.parallel/db.conf";
if(not open(CONF, "<", $dbconf)) {
	die "Cannot read database config file '$dbconf': $!\n";
}
my $max_db_usage_mb = 8192;
my $host;
my $pass;
my $user;
while(<CONF>) {
	chomp;
	my($key,$data) = split(/=/);
	if($key eq "user") { $user = $data; }
	if($key eq "pass") { $pass = $data; }
	if($key eq "host") { $host = $data; }
}
close(CONF);
my $sql_config_error = 0;
if($user !~ /^[a-z0-9]+$/) { print "'user' parameter '$user' is invalid\n"; $sql_config_error = 1; }
if($pass !~ /^[a-zA-Z0-9]{8,15}$/) { print "'pass' parameter '$pass' is invalid\n"; $sql_config_error = 1; }
if($host !~ /^[a-z0-9\.]+$/) { print "'host' parameter '$host' is invalid\n"; $sql_config_error = 1; }
if($sql_config_error) { die "Invalid database config file '$dbconf'\n"; }

my $gdbh = DBI->connect("DBI:Pg:database=$database;host=$host",
						$user, $pass, {'RaiseError' => 2, AutoCommit => 0});
my $table = $user;
if($sqlset) { $table = $user.$sqlset; }

if(! main::verify_table($gdbh,$table)) {
	print "ERROR: no such table\n";
	$gdbh->disconnect();
	exit 1;
}

if($load) { main::load($gdbh,$table,$user); }
elsif($show_sets) { main::show_sets($gdbh); }
elsif($stats) { main::stats($gdbh,$table); }
elsif($delete) { main::delete($gdbh,$table); }
elsif($reset) { main::reset($gdbh,$table); }
elsif($reset_pbs) { main::reset_pbs($gdbh,$table); }
elsif($reset_sched) { main::reset_pbs($gdbh,$table); }
elsif($reset_slurm) { main::reset_slurm($gdbh,$table); }
elsif($reset_all) { main::reset_all($gdbh,$table); }
elsif($delete_comp) { main::delete_comp($gdbh,$table); }
elsif($nonzero) { main::nonzero($gdbh,$table); }
elsif($show_comp) { main::show_comp($gdbh,$table); }
elsif($show_avail) { main::show_avail($gdbh,$table); }
elsif($show_running) { main::show_running($gdbh,$table); }
elsif($nonzero_reset) { main::nonzero_reset($gdbh,$table); }
elsif($show_index) { main::show_index_type($gdbh,$table); }
elsif($set_index) { main::set_index_type($gdbh,$table,$set_index); }
elsif($show_sizes) { main::show_sizes($gdbh,$user); }
else { $gdbh->disconnect(); main::HELP_MESSAGE(); }

$gdbh->disconnect();


sub load {
	my $dbh = shift;
	my $table = shift;
	my $user = shift;
	my $unix_time = time;
	my $progress = 100000;
	my $rows_cp = 0;
	my($total,%junk) = main::get_sizes($dbh,$user);
	if($total > $max_db_usage_mb) {
		main::show_sizes($dbh,$user);
		print "\nERROR: Database usage limit exceeded. Clear out old data before proceeding.\n";
		$dbh->disconnect();
		exit 255;
	}
	$dbh->do("COPY $table ( command,status,create_ts ) FROM STDIN");
	print STDERR "Loading data ... ";
	while(my $item = <STDIN>) {
		chomp $item;
		if(! $dbh->pg_putcopydata("$item\t0\t$unix_time\n")) {
			die "pg_putcopydata(\"$item\\t0\\t$unix_time\\n\") failed: ".$dbh->errstr."\n";
		}
		$rows_cp++;
		if( $rows_cp % $progress == 0) { print STDERR "$rows_cp "; }
	}
	if(! $dbh->pg_putcopyend()) { die "putcopyend() failed: ".$dbh->errstr."\n"; }
	$dbh->do("COMMIT");
	print STDERR "done.\n";
	$dbh->{AutoCommit} = 1;
	print STDERR "Optimizing index ... ";
	my $sql_analyze = "VACUUM ( ANALYZE ) $table";
	my $sth = $dbh->prepare($sql_analyze);
	$sth->execute() or die $sth->errstr;
	print STDERR "done.\n";
}

sub stats {
	my $dbh = shift;
	my $table = shift;
	my %status_h = (0, 'available',
					1, 'picked up',
					2, 'complete');
	my $sql_count = "SELECT COUNT(*) FROM $table WHERE status = ?";
	foreach my $status (sort keys %status_h) {
		my $sth = $dbh->prepare($sql_count);
		$sth->execute($status);
		my ($count) = $sth->fetchrow_array();
		print "$count\t$status_h{$status}\n";
	}
}

sub nonzero {
	my $dbh = shift;
	my $table = shift;
	my $sql_count = "SELECT return_code,command FROM $table WHERE status = 2 AND return_code != 0";
	my $sth = $dbh->prepare($sql_count);
	$sth->execute();
	while( my($rc,$command) = $sth->fetchrow_array()) {
		print "$rc\t$command\n";
	}
}

sub delete {
	my $dbh = shift;
	my $table = shift;
	if(! $yes) {
		print "Are you sure you want to delete all tasks (Y/n)? ";
		my $ans = <STDIN>;
		chomp $ans;
		if($ans !~ /Y.*/) { $dbh->disconnect(); if($ans =~ /y.*/) { print "Must answer Y to confirm.\n"; } exit 0; }
	}
	my $sql_delete = "DELETE FROM $table";
	my $sth = $dbh->prepare($sql_delete);
	$sth->execute();
	my $rows = $sth->rows;
	print "Tasks deleted: $rows\n";
	my $sql_alter = "SELECT setval('".$table."_rowid_seq', 1)";
	my $sth_reset = $dbh->prepare($sql_alter);
	$sth_reset->execute();
	$dbh->do("COMMIT");
	$dbh->{AutoCommit} = 1;
	print STDERR "Cleaning up ... ";
	my $sql_vacuum = "VACUUM $table";
	my $sth_vc = $dbh->prepare($sql_vacuum);
	$sth_vc->execute() or die $sth_vc->errstr;
	print STDERR "done.\n";
}

sub delete_comp {
	print "The --del-comp option has been removed. Please instead use the --del option to\nremove all tasks.\n";
#	my $dbh = shift;
#	my $table = shift;
#	if(! $yes) {
#		print "Are you sure you want to delete all completed tasks (Y/n)? ";
#		my $ans = <STDIN>;
#		chomp $ans;
#		if($ans !~ /Y.*/) { $dbh->disconnect(); if($ans =~ /y.*/) { print "Must answer Y to confirm.\n"; } exit 0; }
#	}
#	my $sql_delete = "DELETE FROM $table WHERE status = 2";
#	my $sth = $dbh->prepare($sql_delete);
#	$sth->execute();
#	$dbh->do("COMMIT");
#	my $rows = $sth->rows;
#	print "Tasks deleted: $rows\n";
#	$dbh->{AutoCommit} = 1;
#	print STDERR "Cleaning up ... ";
#	my $sql_analyze = "VACUUM ( ANALYZE ) $table";
#	my $sth_vc = $dbh->prepare($sql_analyze);
#	$sth_vc->execute() or die $sth_vc->errstr;
#	print STDERR "done.\n";
}


sub reset {
	my $dbh = shift;
	my $table = shift;
	if(! $yes) {
		print "Are you sure you want to set all picked up tasks to available (Y/n)? ";
		my $ans = <STDIN>;
		chomp $ans;
		if($ans !~ /Y.*/) { $dbh->disconnect(); if($ans =~ /y.*/) { print "Must answer Y to confirm.\n"; } exit 0; }
	}
	my $sql_delete = "UPDATE $table SET status = 0 WHERE status = 1";
	my $sth = $dbh->prepare($sql_delete);
	$sth->execute();
	$dbh->do("COMMIT");
	my $rows = $sth->rows;
	print "Tasks reset: $rows\n";
}

sub reset_all {
	my $dbh = shift;
	my $table = shift;
	if(! $yes) {
		print "Are you sure you want to set _all_ tasks to available (Y/n)? ";
		my $ans = <STDIN>;
		chomp $ans;
		if($ans !~ /Y.*/) { $dbh->disconnect(); if($ans =~ /y.*/) { print "Must answer Y to confirm.\n"; } exit 0; }
	}
	my $sql_delete = "UPDATE $table SET status = 0 WHERE status != 0";
	my $sth = $dbh->prepare($sql_delete);
	$sth->execute();
	$dbh->do("COMMIT");
	my $rows = $sth->rows;
	print "Tasks reset: $rows\n";
}

sub nonzero_reset {
	my $dbh = shift;
	my $table = shift;
	if(! $yes) {
		print "Are you sure you want to set all completed non-zero exit code tasks to available (Y/n)? ";
		my $ans = <STDIN>;
		chomp $ans;
		if($ans !~ /Y.*/) { $dbh->disconnect(); if($ans =~ /y.*/) { print "Must answer Y to confirm.\n"; } exit 0; }
	}
	my $sql_delete = "UPDATE $table SET status = 0 WHERE status = 2 AND return_code != 0";
	my $sth = $dbh->prepare($sql_delete);
	$sth->execute();
	$dbh->do("COMMIT");
	my $rows = $sth->rows;
	print "Tasks reset: $rows\n";
}

sub get_sets {
	my $dbh = shift;
	my @sets = ();
	my $select_sql = "SELECT relname FROM pg_class c WHERE c.relkind = 'r'";
	my $sth = $dbh->prepare($select_sql);
	$sth->execute() or die $DBI::errstr;
	while(my ($name) = $sth->fetchrow_array()) {
		next if $name !~ /^$user.+/;
		$name =~ s/$user//;
		push @sets, $name;
	}
	return @sets;
}

sub get_sizes {
	my $dbh = shift;
	my $user = shift;
	my %table_sizes_h = ();
	my @sets = main::get_sets($dbh);
	my %table_disp_h = ($user,'DEFAULT');
	my $total_db_mb = 0;
	foreach my $set (@sets) {
		$table_disp_h{$user.$set} = $set;
	}
	foreach my $table (sort keys %table_disp_h) {
		my $friendly = $table_disp_h{$table};
		my $size_sql = "SELECT pg_relation_size('$table')";
		my $sth_size = $dbh->prepare($size_sql);
		$sth_size->execute() or die $DBI::errstr;
		my ($table_size_b) = $sth_size->fetchrow_array();
		my $table_size_mb = sprintf("%.2f", $table_size_b/1048576);
		$table_sizes_h{$table}{$friendly} = $table_size_mb;
		$total_db_mb = $total_db_mb + $table_size_mb;
	}
	return($total_db_mb,%table_sizes_h);
}

sub show_sizes {
	my $dbh = shift;
	my $user = shift;
	my ($total_db_size,%table_disp_h) = main::get_sizes($dbh,$user);
	print "Name                      Size in MB\n";
	print "------------------------------------\n";
	foreach my $table (sort keys %table_disp_h) {
	foreach my $friendly (keys %{ $table_disp_h{$table} }) {
		my $table_size_mb = $table_disp_h{$table}{$friendly};
		format =
@<<<<<<<<<<<<<<<<<<<<<<<    @>>>>>>>
$friendly,     $table_size_mb
.
		write;
	} }
	print "------------------------------------\n";
	my $remains = $max_db_usage_mb - $total_db_size;
	if($remains < 0) { $remains = 0; }
	print "Total Use: $total_db_size, Limit: $max_db_usage_mb, Remaining: $remains\n";
}

sub reset_pbs {
	my $dbh = shift;
	my $table = shift;
	my %running_jobs = ();
	eval "use XML::LibXML;";
	if($@) {
		die "XML::LibXML module must be installed if using --reset-pbs or --reset-sched\n";
	}
	my $xmlout_jobs = `qstat -x`;
	$pRc = $?;
	if($pRc != 0) {
		die "qstat -x exited abnormally (RC = $pRc)\n";
	}
	if(! $xmlout_jobs) { $yes = 1; main::reset($dbh,$table); }
	my $parser_jobs = XML::LibXML->new();
	my $doc_jobs = $parser_jobs->parse_string($xmlout_jobs);
	my $query = "//Data/Job[job_state = 'R']";
	foreach my $jobo ($doc_jobs->findnodes($query)) {
		my ($jobido) = $jobo->getChildrenByTagName('Job_Id');
		my $jobid = $jobido->to_literal;
		$running_jobs{$jobid} = undef;
	}
	my $select_sql = "SELECT rowid,sched_id FROM $table WHERE status = 1";
	my $sth = $dbh->prepare($select_sql);
	$sth->execute() or die $DBI::errstr;
	my @update_rowids = ();
	while(my ($rowid,$db_sched_id) = $sth->fetchrow_array()) {
		if($db_sched_id && ! exists $running_jobs{$db_sched_id}) {
			push @update_rowids, $rowid;
		}
	}
	my $rows = 0;
	if (@update_rowids) {
		foreach my $rowid (@update_rowids) {
			my $update_sql = "UPDATE $table SET status = 0 WHERE rowid = ?";
			my $sth = $dbh->prepare($update_sql);
			$sth->execute($rowid);
		}
		$rows = $sth->rows;
		$dbh->do("COMMIT");
	}
	print "Tasks reset: $rows\n";
}

sub reset_slurm {
	my $dbh = shift;
	my $table = shift;
	my %running_jobs = ();
	eval "use Slurm;";
	if($@) {
		die "Slurm module must be installed if using --reset-pbs or --reset-sched\n";
	}
	# Get running jobs from slurm in %running_jobs
	my $slurm = Slurm::new();
	my $resp = $slurm->load_jobs();
	unless($resp) {
		die "Failed to load job info: " . $slurm->strerror();
	}
	foreach my $job_h (@{$resp->{'job_array'}}) {
		my $job_id = $job_h->{'job_id'};
		my $job_state = $job_h->{'job_state'};
		if($job_state == 1) {
			$running_jobs{$job_id} = undef;
		}
	}
	my $select_sql = "SELECT rowid,sched_id FROM $table WHERE status = 1";
	my $sth = $dbh->prepare($select_sql);
	$sth->execute() or die $DBI::errstr;
	my @update_rowids = ();
	while(my ($rowid,$db_sched_id) = $sth->fetchrow_array()) {
		if($db_sched_id && ! exists $running_jobs{$db_sched_id}) {
			push @update_rowids, $rowid;
		}
	}
	my $rows = 0;
	if (@update_rowids) {
		foreach my $rowid (@update_rowids) {
			my $update_sql = "UPDATE $table SET status = 0 WHERE rowid = ?";
			my $sth = $dbh->prepare($update_sql);
			$sth->execute($rowid);
		}
		$rows = $sth->rows;
		$dbh->do("COMMIT");
	}
	print "Tasks reset: $rows\n";
}

sub show_comp {
	my $dbh = shift;
	my $table = shift;
	my $sql_count = "SELECT command FROM $table WHERE status = 2";
	my $sth = $dbh->prepare($sql_count);
	$sth->execute();
	while( my($command) = $sth->fetchrow_array()) {
		print "$command\n";
	}
}

sub show_avail {
	my $dbh = shift;
	my $table = shift;
	my $sql_count = "SELECT command FROM $table WHERE status = 0";
	my $sth = $dbh->prepare($sql_count);
	$sth->execute();
	while( my($command) = $sth->fetchrow_array()) {
		print "$command\n";
	}
}

sub show_running {
	my $dbh = shift;
	my $table = shift;
	my $sql_count = "SELECT command FROM $table WHERE status = 1";
	my $sth = $dbh->prepare($sql_count);
	$sth->execute();
	while( my($command) = $sth->fetchrow_array()) {
		print "$command\n";
	}
}

sub get_index_type {
	my $dbh = shift;
	my $table = shift;
	my $index_prefix = $table.'_status_';
	my $hs_index_query = "SELECT indexname FROM pg_indexes WHERE tablename = '$table'";
	my $sth = $dbh->prepare($hs_index_query);
	$sth->execute();
	my $idx_type;
	while( my($indexname) = $sth->fetchrow_array()) {
		if($indexname =~ /$index_prefix[a-z]+/) {
			($idx_type) = $indexname =~ /$index_prefix([a-z]+)/;
		}
	}
	return $idx_type;
}

sub show_index_type {
	my $dbh = shift;
	my $table = shift;
	print main::get_index_type($dbh,$table)."\n";
}

sub set_index_type {
	my $dbh = shift;
	my $table = shift;
	my $ti_type = shift;
	my $t_index_name = $table."_status_".$ti_type;
	my $ci_type = main::get_index_type($dbh,$table);
	my $c_index_name = $table."_status_".$ci_type;
	if($ti_type eq $ci_type) {
		print "ERROR: table already has index of type $ti_type\n";
		$dbh->disconnect();
		exit 1;
	} else {
		if(! $yes) {
			main::stats($dbh,$table);
			print "Changing the index type may take a long time with > 500K tasks. Proceed (Y/n)? ";
			my $ans = <STDIN>;
			chomp $ans;
			if($ans !~ /Y.*/) { if($ans =~ /y.*/) { print "Must answer Y to confirm.\n"; } $dbh->disconnect(); exit 0; }
		}
		my $drop_i_query = "DROP INDEX $c_index_name";
		my $sth_di = $dbh->prepare($drop_i_query);
	        $sth_di->execute();
		my $create_i_query = "CREATE INDEX $t_index_name ON $table USING $ti_type (status)";
		my $sth_ci = $dbh->prepare($create_i_query);
		$sth_ci->execute();
		$dbh->do("COMMIT");
		$dbh->{AutoCommit} = 1;
		my $sql_vacuum = "VACUUM $table";
		my $sth_vc = $dbh->prepare($sql_vacuum);
		$sth_vc->execute() or die $sth_vc->errstr;
	}
}

sub verify_table {
	my $dbh = shift;
	my $table = shift;
	$table =~ tr/[A-Z]/[a-z]/;
	my $ct_query = "SELECT relname FROM pg_class where relname = '$table'";
	my $sth = $dbh->prepare($ct_query);
	$sth->execute();
	if($sth->fetchrow_array()) {
		return 1;
	} else {
		return 0;
	}
}


sub HELP_MESSAGE {
	print "Usage: psu [SINGLE ACTION] [--sql-set setname]\n";
	print "  ACTIONS\n";
	print "    --load             load tasks from STDIN\n";
	print "    --stats            show task counts\n";
	print "    --show-sets        list additional task sets\n";
	print "    --show-sizes       show sizes of all task sets\n";
	print "    --del              delete all tasks (add -y for no prompt)\n";
	print "    --reset            set picked up tasks to available (add -y for no prompt)\n";
	print "    --reset-pbs        set picked up tasks to available with PBS scheduler data\n";
	print "    --reset-slurm      set picked up tasks to available with Slurm scheduler data\n";
	print "    --reset-all        set all tasks to available (add -y for no prompt)\n";
	print "    --show-nonzero     show completed tasks with non-zero exit code\n";
	print "    --reset-nonzero    set completed tasks with non-zero exit code to available\n";
	print "    --show-comp        show completed tasks\n";
	print "    --show-avail       show tasks that have not been picked up\n";
	print "    --show-running     show tasks that are running/picked up\n";
	print "    --show-index       show the index type\n";
	print "    --set-index        set the index type [btree|hash] (ADVANCED USE ONLY)\n";
	exit 0;
}
