#!/usr/bin/perl

use DBI;
use Getopt::Long;

GetOptions("load" => \$load,
	"stats" => \$stats,
	"del" => \$delete,
	"reset" => \$reset,
	"reset-sched" => \$reset_sched,
	"del-comp" => \$delete_comp,
	"show-nonzero" => \$nonzero,
	"reset-nonzero" => \$nonzero_reset,
	"show-comp" => \$show_comp,
	"show-avail" => \$show_avail,
	"show-running" => \$show_running,	
	"show-sets" => \$show_sets,
	"y" => \$yes,
	"a=s" => \$database,
	"sql-set=s" => \$set) || &HELP_MESSAGE();

if (! $database) { $database = 'parallel'; }

my $dbconf = $ENV{'HOME'} . "/.parallel/db.conf";
if(not open(CONF, "<", $dbconf)) {
	die "Cannot read database config file `$dbconf': $!\n";
}
my $host;
my $pass;
my $user;
while(<CONF>) {
	chomp;
	my($key,$data) = split(/=/);
	if($key eq "user") { $user = $data; }
	if($key eq "pass") { $pass = $data; }
	if($key eq "host") { $host = $data; }
}
close(CONF);
my $gdbh = DBI->connect("DBI:Pg:database=$database;host=$host",
						$user, $pass, {'RaiseError' => 2, AutoCommit => 0});
my $table = $user;
if($set) { $table = $user.$set; }

if($load) { &load($gdbh,$table); }
elsif($show_sets) { &show_sets($gdbh); }
elsif($stats) { &stats($gdbh,$table); }
elsif($delete) { &delete($gdbh,$table); }
elsif($reset) { &reset($gdbh,$table); }
elsif($reset_sched) { &reset_sched($gdbh,$table); }
elsif($delete_comp) { &delete_comp($gdbh,$table); }
elsif($nonzero) { &nonzero($gdbh,$table); }
elsif($show_comp) { &show_comp($gdbh,$table); }
elsif($show_avail) { &show_avail($gdbh,$table); }
elsif($show_running) { &show_running($gdbh,$table); }
elsif($nonzero_reset) { &nonzero_reset($gdbh,$table); }
else { &HELP_MESSAGE(); }

$gdbh->disconnect();


sub load($) {
	my $dbh = shift;
	my $table = shift;
	my $unix_time = time;
	my $progress = 100000;
	my $rows_cp = 0;
	$dbh->do("COPY $table ( command,status,create_ts ) FROM STDIN");
	print STDERR "Loading data ... ";
	while(my $item = <STDIN>) {
		chomp $item;
		if(! $dbh->pg_putcopydata("$item\t0\t$unix_time\n")) {
			die "pg_putcopydata(\"$item\\t0\\t$unix_time\\n\") failed: ".$dbh->errstr."\n";
		}
		$rows_cp++;
		if( $rows_cp % $progress == 0) { print STDERR "$rows_cp "; }
	}
	if(! $dbh->pg_putcopyend()) { die "putcopyend() failed: ".$dbh->errstr."\n"; }
	$dbh->do("COMMIT");
	print STDERR " done.\n";
	$dbh->{AutoCommit} = 1;
	print STDERR "Optimizing index ...";
	my $sql_analyze = "VACUUM ( ANALYZE ) $table";
	my $sth = $dbh->prepare($sql_analyze);
	$sth->execute() or die $sth->errstr;
	print STDERR " done.\n";
}

sub stats($) {
	my $dbh = shift;
	my $table = shift;
	my %status_h = (0, 'available',
					1, 'picked up',
					2, 'complete');
	my $sql_count = "SELECT COUNT(*) FROM $table WHERE status = ?";
	foreach my $status (sort keys %status_h) {
		my $sth = $dbh->prepare($sql_count);
		$sth->execute($status);
		my ($count) = $sth->fetchrow_array();
		print "$count\t$status_h{$status}\n";
	}
}

sub nonzero($) {
	my $dbh = shift;
	my $table = shift;
	my $sql_count = "SELECT return_code,command FROM $table WHERE status = 2 AND return_code != 0";
	my $sth = $dbh->prepare($sql_count);
	$sth->execute();
	while( my($rc,$command) = $sth->fetchrow_array()) {
		print "$rc\t$command\n";
	}
}

sub delete($) {
	my $dbh = shift;
	my $table = shift;
	if(! $yes) {
		print "Are you sure you want to delete all tasks (Y/n)? ";
		my $ans = <STDIN>;
		chomp $ans;
		if($ans !~ /Y.*/) { exit 0; }
	}
	my $sql_delete = "DELETE FROM $table";
	my $sth = $dbh->prepare($sql_delete);
	$sth->execute();
	my $rows = $sth->rows;
	print "Tasks deleted: $rows\n";
	my $sql_alter = "SELECT setval('".$table."_rowid_seq', 1)";
	my $sth_reset = $dbh->prepare($sql_alter);
	$sth_reset->execute();
	$dbh->do("COMMIT");
}

sub delete_comp($) {
	my $dbh = shift;
	my $table = shift;
	if(! $yes) {
		print "Are you sure you want to delete all completed tasks (Y/n)? ";
		my $ans = <STDIN>;
		chomp $ans;
		if($ans !~ /Y.*/) { exit 0; }
	}
	my $sql_delete = "DELETE FROM $table WHERE status = 2";
	my $sth = $dbh->prepare($sql_delete);
	$sth->execute();
	$dbh->do("COMMIT");
	my $rows = $sth->rows;
	print "Tasks deleted: $rows\n";
}


sub reset($) {
	my $dbh = shift;
	my $table = shift;
	if(! $yes) {
		print "Are you sure you want to set all picked up tasks to available (Y/n)? ";
		my $ans = <STDIN>;
		chomp $ans;
		if($ans !~ /Y.*/) { exit 0; }
	}
	my $sql_delete = "UPDATE $table SET status = 0 WHERE status = 1";
	my $sth = $dbh->prepare($sql_delete);
	$sth->execute();
	$dbh->do("COMMIT");
	my $rows = $sth->rows;
	print "Tasks reset: $rows\n";
}

sub nonzero_reset($) {
	my $dbh = shift;
	my $table = shift;
	if(! $yes) {
		print "Are you sure you want to set all completed non-zero exit code tasks to available (Y/n)? ";
		my $ans = <STDIN>;
		chomp $ans;
		if($ans !~ /Y.*/) { exit 0; }
	}
	my $sql_delete = "UPDATE $table SET status = 0 WHERE status = 2 AND return_code != 0";
	my $sth = $dbh->prepare($sql_delete);
	$sth->execute();
	$dbh->do("COMMIT");
	my $rows = $sth->rows;
	print "Tasks reset: $rows\n";
}

sub show_sets() {
	my $dbh = shift;
	my $select_sql = "SELECT relname FROM pg_class c WHERE c.relkind = 'r'";
	my $sth = $dbh->prepare($select_sql);
	$sth->execute() or die $DBI::errstr;
	while(my ($name) = $sth->fetchrow_array()) {
		next if $name !~ /$user.+/;
		$name =~ s/$user//;
		print "$name\n";
	}
}

sub reset_sched($) {
	my $dbh = shift;
	my $table = shift;
	my %running_jobs = ();
	eval "use XML::LibXML;";
	if($@) {
		die "XML::LibXML module must be installed if using --reset-sched\n";
	}
	my $xmlout_jobs = `qstat -x`;
	$pRc = $?;
	if($pRc != 0) {
		die "qstat -x exited abnormally (RC = $pRc)\n";
	}
	my $parser_jobs = XML::LibXML->new();
	my $doc_jobs = $parser_jobs->parse_string($xmlout_jobs);
	my $query = "//Data/Job[job_state = 'R']";
	foreach my $jobo ($doc_jobs->findnodes($query)) {
		my ($jobido) = $jobo->getChildrenByTagName('Job_Id');
		my $jobid = $jobido->to_literal;
		$running_jobs{$jobid} = undef;
	}
	my $select_sql = "SELECT rowid,sched_id FROM $table WHERE status = 1";
	my $sth = $dbh->prepare($select_sql);
	$sth->execute() or die $DBI::errstr;
	my @update_rowids = ();
	while(my ($rowid,$db_sched_id) = $sth->fetchrow_array()) {
		if($db_sched_id && ! exists $running_jobs{$db_sched_id}) {
			push @update_rowids, $rowid;
		}
	}
	my $rows = 0;
	if (@update_rowids) {
		foreach my $rowid (@update_rowids) {
			my $update_sql = "UPDATE $table SET status = 0 WHERE rowid = ?";
			my $sth = $dbh->prepare($update_sql);
			$sth->execute($rowid);
		}
		$rows = $sth->rows;
		$dbh->do("COMMIT");
	}
	print "Tasks reset: $rows\n";
}

sub show_comp {
	my $dbh = shift;
	my $table = shift;
	my $sql_count = "SELECT command FROM $table WHERE status = 2";
	my $sth = $dbh->prepare($sql_count);
	$sth->execute();
	while( my($command) = $sth->fetchrow_array()) {
		print "$command\n";
	}
}

sub show_avail {
	my $dbh = shift;
	my $table = shift;
	my $sql_count = "SELECT command FROM $table WHERE status = 0";
	my $sth = $dbh->prepare($sql_count);
	$sth->execute();
	while( my($command) = $sth->fetchrow_array()) {
		print "$command\n";
	}
}

sub show_running {
	my $dbh = shift;
	my $table = shift;
	my $sql_count = "SELECT command FROM $table WHERE status = 1";
	my $sth = $dbh->prepare($sql_count);
	$sth->execute();
	while( my($command) = $sth->fetchrow_array()) {
		print "$command\n";
	}
}


sub HELP_MESSAGE() {
	print "Usage: psu [SINGLE ACTION] [--sql-set setname]\n";
	print "  ACTIONS\n";
	print "    --load             load tasks from STDIN\n";
	print "    --stats            show task counts\n";
	print "    --show-sets        list additional job sets\n";
	print "    --del              delete all tasks (add -y for no prompt)\n";
	print "    --del-comp         delete all completed tasks (add -y for no prompt)\n";
	print "    --reset            set picked up tasks to available (add -y for no prompt)\n";
	print "    --reset-sched      set picked up tasks to available with scheduler data\n";
	print "    --show-nonzero     show completed tasks with non-zero exit code\n";
	print "    --reset-nonzero    set completed tasks with non-zero exit code to available\n";
	print "    --show-comp        show completed tasks\n";
	print "    --show-avail       show tasks that have not been picked up\n";
	print "    --show-running     show tasks that are running/picked up\n";
	exit 0;
}
